package database

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type RoomController struct{}

func (ctrl *RoomController) Index(c *gin.Context) {
	rooms := []Room{}
	DB.Find(&rooms)
	c.JSON(http.StatusOK, gin.H{"data": rooms})
}

func (ctrl *RoomController) Show(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	room := Room{}

	if err := DB.First(&room, id).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"data": room})
}

func (ctrl *RoomController) Create(c *gin.Context) {
	var input CreateRoomInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	room := Room{Name: input.Name}
	DB.Create(&room)

	c.JSON(http.StatusOK, gin.H{"data": room})
}

func (ctrl *RoomController) Update(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	room := Room{}

	if err := DB.First(&room, id).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	var input UpdateRoomInput
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	DB.Model(&room).Updates(input)

	c.JSON(http.StatusOK, gin.H{"data": room})
}

func (ctrl *RoomController) Delete(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	room := Room{}

	if err := DB.First(&room, id).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Record not found!"})
		return
	}

	DB.Delete(&room)

	c.JSON(http.StatusOK, gin.H{"data": "Room deleted successfully"})
}
